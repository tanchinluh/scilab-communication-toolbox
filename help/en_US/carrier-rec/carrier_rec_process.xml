<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from carrier_rec_process.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="carrier_rec_process" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>carrier_rec_process</refname>
    <refpurpose>Main process for the carrier recovery</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   [cr,z2] = carrier_rec_process(cr,z1)
   [cr,z2,dbg] = carrier_rec_process(cr,z1);
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>cr:</term>
      <listitem><para> Carrier recovery object</para></listitem></varlistentry>
   <varlistentry><term>z1:</term>
      <listitem><para> Input I/Q sample</para></listitem></varlistentry>
   <varlistentry><term>z2:</term>
      <listitem><para> Output I/Q sample, frequency and phase corrected</para></listitem></varlistentry>
   <varlistentry><term>dbg:</term>
      <listitem><para> Optional debug information (recovered carrier)</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Run a local oscillator tuned to the input signal through a phase error detector and a loop filter. The local oscillator is used to correct the phase and frequency of the input signal:
<latex>$z_2 = z_1 e^{-2\pi \mathbf{i} \theta}$</latex>, with <latex>$\theta=$</latex> current phase of the local oscillator.
   </para>
   <para>
<refsection><title>Example</title></refsection>
<programlisting>
// Build a BPSK signal
mod = mod_init('bpsk',fs=1,fi=0,fsymb=1);
[mod,z1] = mod_process(mod,prbs(100));
// With some noise and phase offset
z1 = awgn(z1, 0.05, 'c') .* exp(%i*0.7*%pi/2);
//
// Build a carrier recovery object
ped = ped_init('psk', 2, tc = 10); // Default PED for BPSK
lf = lf_init(1, tc = 10); // First order loop filter
cr = carrier_rec_init(ped, lf);
//
// Proceed to carrier recovery
[cr,z2] = carrier_rec_process(cr,z1);
//
scf(0); clf();
subplot(211);
plot_const(z1);
xtitle("Input of carrier recovery");
subplot(212);
plot_const(z2);
xtitle("Output of carrier recovery");
</programlisting>
<mediaobject><imageobject><imagedata fileref="ex_carrier_rec_process1.png" format="PNG"/></imageobject><caption><para>Example: BPSK signal with phase offset before and after carrier recovery.</para></caption></mediaobject>
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>See also</title>
   <simplelist type="inline">
   <member><link linkend="carrier_rec_init">carrier_rec_init</link></member>
   </simplelist>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>J.A., full documentation available on <ulink url="http://www.tsdconseil.fr/log/sct">http://www.tsdconseil.fr/log/sct</ulink></member>
   </simplelist>
</refsection>
</refentry>

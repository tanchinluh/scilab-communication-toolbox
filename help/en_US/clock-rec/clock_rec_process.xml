<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from clock_rec_process.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="clock_rec_process" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>clock_rec_process</refname>
    <refpurpose>Proceed to clock recovery. Output signal y is resampled at symbol frequency and synchronized with the detected clock.</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   [cr,y] = clock_rec_process(cr,x[,coarse_rssi]);
   [cr,y,dbg] = clock_rec_process(cr,x[,coarse_rssi]);
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>x:</term>
      <listitem><para> Input signal, sampled at <varname>osf</varname> sample/symbol</para></listitem></varlistentry>
   <varlistentry><term>cr:</term>
      <listitem><para> Clock recovery object (can be created with <link linkend="clock_rec_init">clock_rec_init()</link>)</para></listitem></varlistentry>
   <varlistentry><term>coarse_rssi:</term>
      <listitem><para> Optionnal vector, of same dimension as x, indicating the coarse RSSI indicator on the x signal. It will be used to normalize the gain on the timing error detection. If not provided, the signal is supposed to be already normalized.</para></listitem></varlistentry>
   <varlistentry><term>y:</term>
      <listitem><para> Output signal, synchronized and sampled at 1 sample/symbol</para></listitem></varlistentry>
   <varlistentry><term>dbg:</term>
      <listitem><para> Optionnal debug structure (dbg.e: instantaneous clock error (1d vector), dbg.mu: phase shift vector)</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Given an input oversampled binary signal, this function will downsample
the signal at the symbol rate, and synchronize the sampling points with
the signal clock.
   </para>
   <para>
<refsection><title>Example</title></refsection>
<programlisting>
nsymb = 120; // Generate 120 symbols
osf = 9;     // Input oversampling factor = 9 samples / symbol
// Creation of a simple signal: NRZ filtered by its matched filter
// (e.g. a moving average)
x = ma(nrz(prbs(nsymb),osf),osf);
// Apply a fractionnal delay so as to have a desynchronized signal
// (otherwise the signal would be already synchronized)
x = frac_delay(x, osf/2);
// Proceed to clock recovery
cr = clock_rec_init(osf);
[cr,y] = clock_rec_process(cr,x);
// --&gt; y is now sampled at one sample / symbol and synchronized
///////
/////// PLOTTING THE RESULTS
scf(0); clf();
// Initial sampling points
subplot(211); plot(x);
// Resampled output
subplot(212); plot(y);
</programlisting>
<mediaobject><imageobject><imagedata fileref="ex_clock_rec_process.png" format="PNG"/></imageobject><caption><para>Example of clock recovery</para></caption></mediaobject>
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>See also</title>
   <simplelist type="inline">
   <member><link linkend="clock_rec_init">clock_rec_init</link></member>
   </simplelist>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>J.A., full documentation available on <ulink url="http://www.tsdconseil.fr/log/sct">http://www.tsdconseil.fr/log/sct</ulink></member>
   </simplelist>
</refsection>
</refentry>

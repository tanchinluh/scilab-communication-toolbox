<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from clock_rec_init.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="clock_rec_init" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>clock_rec_init</refname>
    <refpurpose>Creation of a clock recovery object.</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   cr = clock_rec_init(osf)
   cr = clock_rec_init(osf,ted,itrp,tc)
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>osf:</term>
      <listitem><para> Input signal oversampling factor (e.g. ratio of input signal frequency vs symbol frequency)</para></listitem></varlistentry>
   <varlistentry><term>ted:</term>
      <listitem><para> Timing error detector object (default is Gardner detector). A ted can be created with the <link linkend="ted_init">ted_init</link> function.</para></listitem></varlistentry>
   <varlistentry><term>itrp:</term>
      <listitem><para> Interpolator object (default is cardinal cubic spline interpolator). A interpolator can be created with the <link linkend="itrp_init">itrp_init</link> function.</para></listitem></varlistentry>
   <varlistentry><term>tc:</term>
      <listitem><para> Time constant of the loop, in symbols (default is 5 symbols)</para></listitem></varlistentry>
   <varlistentry><term>cr:</term>
      <listitem><para> Resulting clock recovery object</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
This function will create a clock recovery object, that can be used afterwards to resynchronize and resample an incoming NRZ stream with implicit clock.
   </para>
   <para>
Optionnaly, the user can choose a specific Timing Error Detector (default is Gardner), and a specific interpolator (default is cardinal cubic spline).
   </para>
   <para>
<refsection><title>Example</title></refsection>
<programlisting>
// Create a clock recovery object for an oversampling ratio of 8
cr = clock_rec_init(8);
</programlisting>
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>See also</title>
   <simplelist type="inline">
   <member><link linkend="clock_rec_process">clock_rec_process</link></member>
   <member><link linkend="ted_init">ted_init</link></member>
   <member><link linkend="itrp_init">itrp_init</link></member>
   </simplelist>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>J.A., full documentation available on <ulink url="http://www.tsdconseil.fr/log/sct">http://www.tsdconseil.fr/log/sct</ulink></member>
   </simplelist>
</refsection>
</refentry>
